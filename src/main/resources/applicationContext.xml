<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
        http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/cache 
		http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		http://www.springframework.org/schema/jdbc 
		http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd">
    <!--default-autowire="byName"-->


    <description>Spring 配置</description>

    <bean id="propertyConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="false">
	    <property name="locations"> 
	        <list>
	            <value>classpath:jdbc.properties</value>
	        </list>
	    </property> 
    </bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
         <property name="driverClassName" value="${jdbc.driver}" /> <!-- org.postgresql.Driver -->
		 <property name="url" value="${jdbc.url}" />

         <property name="username" value="${jdbc.username}" />
         <property name="password" value="${jdbc.password}" />
         <!-- Connection Pooling Info -->
		<property name="filters" value="stat" />
	    <property name="maxActive" value="100" />
	    <property name="initialSize" value="20" />
	    <property name="maxWait" value="60000" />
	    <property name="minIdle" value="1" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="false" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>

	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"/>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.llg.oas.persistence" />
	</bean>


   	<!--  MyBatis 配置  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
    	<property name="typeAliasesPackage" value="com.llg.oas.entity" />
    	<property name="dataSource" ref="dataSource" />
		<!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径。
         *是个通配符，代表所有的文件，**代表所有目录下 -->
		<property name="mapperLocations">
			<array>
				<value>classpath:com/llg/oas/persistence/xml/*.xml</value>
			</array>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.jy.medusa.interceptor.MyInterceptor"/>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							returnPageInfo=check
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- 通用 Mapper 使用 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.llg.oas.service" />



</beans>